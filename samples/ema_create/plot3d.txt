www.google.com - WebGL - 3D plot of z = f(x,y) 

http://www.webgl.com/2012/03/webgl-demo-google-search-3d-graph/
http://insidesearch.blogspot.com/2012/03/graphing-on-googlecom-now-in-3d.html

Type "3+5" at www.google.com to display a very simple scientific
calculator. Or in Windows, type "calculator" at search bar and
select View > Scientific. Alternatively, my old Hewlett Packard 32S II
RPN Scientfic calculator uses a stack architecture which you push
and pop numbers. The stack is small. Eg, "3 5 +"
=====================
If I had mathematica I could try:
http://reference.wolfram.com/mathematica/ref/Plot3D.html
http://en.wikipedia.org/wiki/Mathematica

> Plot3D[x^2 + y^2, {x,-10,10}, {y,-10,10}]

to plot paraboloid. For the given plot

> Plot3D[a[x,y] + 3*cos[a[x,y]] + 5, {x,-20,20}, {y,-20,20}]
====================
or had Maple
http://en.wikipedia.org/wiki/Maple_(software)
> plot3d(x^2+y^2,x=-1..1,y=-1..1);


=====================
gnuplot:
> a = sqrt(x*x + y*y)
> splot a(x,y)
> splot a(x,y) + 3*cos(a(x,y)) + 5
> set xrange [-20:20]
> set yrange [-20:20]
> splot a(x,y) + 3*cos(a(x,y)) + 5
=====================
main.cpp - MarchingCubes_XFile VC9 project

int DN_2 = 2.0; //4.0 EDIT

float Phi3D(Vector3D pt);
int main();


// Implicit Function loaded or defined here
float Phi3D(Vector3D pt)// EDIT
{
	float x, y, z;
	float a, b, c;

	x = pt.x; y = pt.y; z = pt.z; 

	a = sqrt(x*x + y*y);
	float F = z - (a+3*cos(a)+5);


	return -F;

}

int main()
{
	MC_Create_X_File("google2.x", DN_2, 0.0);

	//system("PAUSE");
	return 0;
}
=====================
emma_march VC9 project -- main.cpp -- uses marching cubes

#include <math.h>
#include "vector3d.h"
#include "Create_Ema_File_MC.h"
...
int main()
{
	MC_Create_Ema_File("google.ema", DN_2, 0.0);

	//system("PAUSE");
	return 0;
}
=====================
backface_removal VC9 project - main.cpp --- uses "emma.lib"

	Vector3D camera, center;
	camera.x = 50.0;
	camera.y = 0.0;
	camera.z =  50.0;

	center.x = 200.0;
	center.y = 200.0;
	center.z = 0;
	Read_Ema_File("..\\ema_create\\google.ema",
		gmaxval, w, h, gimg, camera, center);

	PGM_P5_From_Image("google1.pgm", gimg, w, h);
	system("google1.pgm");


=====================
P:\H-Programs-4\DirectX-Ch7\Meshes.cpp and google2.x

HRESULT InitGeometry()
{
    LPD3DXBUFFER pD3DXMtrlBuffer;

    // Load the mesh from the specified file
    if( FAILED( D3DXLoadMeshFromX( "google2.x", D3DXMESH_SYSTEMMEM, 
                                   g_pd3dDevice, NULL, 
                                   &pD3DXMtrlBuffer, NULL, &g_dwNumMaterials, 
                                   &g_pMesh ) ) )
    {
            MessageBox(NULL, "Could not find .x file", "Meshes.exe", MB_OK);
            return E_FAIL;
    }

//-----------------------------------------------------------------------------
// Name: SetupMatrices()
// Desc: Sets up the world, view, and projection transform matrices.
//-----------------------------------------------------------------------------
VOID SetupMatrices()
{
    // For our world matrix, we will just leave it as the identity
    D3DXMATRIXA16 matWorld;
    D3DXMatrixRotationZ( &matWorld, timeGetTime()/1200.0f );

    g_pd3dDevice->SetTransform( D3DTS_WORLD, &matWorld );

    // Set up our view matrix. A view matrix can be defined given an eye point,
    // a point to lookat, and a direction for which way is up. Here, we set the
    // eye five units back along the z-axis and up three units, look at the 
    // origin, and define "up" to be in the y-direction.
    D3DXVECTOR3 vEyePt( 50.0f, -0.0f, 50.0f );
    D3DXVECTOR3 vLookatPt( 0.0f, 0.0f, 0.0f );
    D3DXVECTOR3 vUpVec( 0.0f, 0.0f, -1.0f );
    D3DXMATRIXA16 matView;
    D3DXMatrixLookAtLH( &matView, &vEyePt, &vLookatPt, &vUpVec );
    g_pd3dDevice->SetTransform( D3DTS_VIEW, &matView );

    // For the projection matrix, we set up a perspective transform (which
    // transforms geometry from 3D view space to 2D viewport space, with
    // a perspective divide making objects smaller in the distance). To build
    // a perpsective transform, we need the field of view (1/4 pi is common),
    // the aspect ratio, and the near and far clipping planes (which define at
    // what distances geometry should be no longer be rendered).
    D3DXMATRIXA16 matProj;
    D3DXMatrixPerspectiveFovLH( &matProj, D3DX_PI/4, 1.0f, 1.0f, 5000.0f );
    g_pd3dDevice->SetTransform( D3DTS_PROJECTION, &matProj );
}

============================
